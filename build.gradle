group 'bzh.netapsys'
version '1.0.0'

ext.junitPlatformVersion = '1.0.0-RC2'
ext.junitJupiterVersion  = '5.0.0-RC2'
ext.junitVintageVersion  = '4.12.0-RC2'
ext.junit4Dependency = '4.12'

buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-RC2'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8

junitPlatform {
    platformVersion '1.0.0-RC2'
//    logManager 'org.apache.logging.log4j.jul.LogManager'
    logManager 'java.util.logging.LogManager'
    reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
}

dependencies {
    // Needed as compile since we're building a JUnit Jupiter extension here
    compile 'org.mockito:mockito-core:2.+'
    compile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"

    // Lombok
    compileOnly("org.projectlombok:lombok:1.16.16")

    /***** TESTS *****/
    // Needed for @RunWith(JUnitPlatform.class) in the IDE
//    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

    // Only needed to run tests in an IDE that bundles an older version
//    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    // Junit
    testCompile("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    testCompile("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")
    testCompile("junit:junit:$junit4Dependency")

    // AssertJ
    testCompile('org.assertj:assertj-core:3.7.0')
    // Hamcrest
    testCompile('org.hamcrest:hamcrest-all:1.3')
    // Mockito
    testCompile('org.mockito:mockito-all:1.8.4')


    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    testRuntime("org.junit.vintage:junit-vintage-engine:$junitVintageVersion")
}